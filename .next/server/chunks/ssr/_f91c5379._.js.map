{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///Users/peter/Documents/dev_projects/simple-table-marketing/src/components/examples/manufacturing/manufacturing-rows.ts"],"sourcesContent":["import { Row } from \"simple-table-core\";\n\n// Generate manufacturing data\nexport const generateManufacturingData = (): Row[] => {\n  const productLines = [\"Assembly Line A\", \"Assembly Line B\", \"Electronics\", \"Packaging\", \"Quality Control\", \"Tooling\"];\n  const productTypes = [\"Component X\", \"Widget Y\", \"Module Z\", \"Part Alpha\", \"Unit Beta\", \"System Gamma\"];\n  const machines = [\"Robot Arm\", \"CNC Machine\", \"Injection Molder\", \"Circuit Printer\", \"Quality Scanner\", \"Packaging\"];\n  const operators = [\"Team Alpha\", \"Team Beta\", \"Team Gamma\", \"Team Delta\", \"Team Epsilon\", \"Team Zeta\"];\n\n  let rowId = 0;\n  const rows: Row[] = [];\n\n  // Generate data for each product line\n  productLines.forEach((productLine, lineIndex) => {\n    // Number of machines/workstations per product line\n    const numStations = Math.floor(Math.random() * 6) + 3; // 3 to 8 stations per line\n\n    const children: Row[] = [];\n    let totalOutput = 0;\n    let totalDefects = 0;\n    let totalDowntime = 0;\n    let totalEfficiency = 0;\n\n    // Generate station data\n    for (let i = 0; i < numStations; i++) {\n      const stationId = `${productLine.charAt(0)}${lineIndex + 1}-S${i + 1}`;\n      const machineType = machines[Math.floor(Math.random() * machines.length)];\n      const operator = operators[Math.floor(Math.random() * operators.length)];\n      const productType = productTypes[Math.floor(Math.random() * productTypes.length)];\n\n      // Calculate metrics\n      const outputRate = Math.floor(Math.random() * 500) + 200; // 200-700 units per shift\n      const cycleTimes = Array.from({ length: 10 }, () => Math.random() * 100 + 50);\n      const avgCycleTime = cycleTimes.reduce((sum, time) => sum + time, 0) / cycleTimes.length;\n      const efficiency = Math.floor(Math.random() * 40) + 60; // 60-100%\n      const defectRate = Math.random() * 5; // 0-5%\n      const defectCount = Math.floor(outputRate * (defectRate / 100));\n      const downtimeHours = Math.random() * 4; // 0-4 hours\n      const utilizationRate = Math.floor(Math.random() * 30) + 70; // 70-100%\n      const energyConsumption = Math.floor(Math.random() * 1000) + 500; // 500-1500 kWh\n      const maintenanceDate = new Date();\n      maintenanceDate.setDate(maintenanceDate.getDate() + Math.floor(Math.random() * 30));\n\n      // Random status weighted toward \"Running\"\n      const statusRandom = Math.random();\n      const status =\n        statusRandom < 0.7\n          ? \"Running\"\n          : statusRandom < 0.8\n          ? \"Scheduled Maintenance\"\n          : statusRandom < 0.9\n          ? \"Unplanned Downtime\"\n          : statusRandom < 0.95\n          ? \"Idle\"\n          : \"Setup\";\n\n      children.push({\n        rowMeta: { rowId: rowId++, isExpanded: true },\n        rowData: {\n          id: stationId,\n          productLine,\n          station: `Station ${i + 1}`,\n          machineType,\n          operator,\n          productType,\n          outputRate,\n          cycletime: avgCycleTime.toFixed(2),\n          efficiency,\n          defectRate: defectRate.toFixed(2),\n          defectCount,\n          downtime: downtimeHours.toFixed(2),\n          utilization: utilizationRate,\n          energy: energyConsumption,\n          status,\n          maintenanceDate: maintenanceDate.toISOString().split(\"T\")[0],\n          cycleTimeData: JSON.stringify(cycleTimes),\n        },\n      });\n\n      // Accumulate totals for product line summary\n      totalOutput += outputRate;\n      totalDefects += defectCount;\n      totalDowntime += downtimeHours;\n      totalEfficiency += efficiency;\n    }\n\n    // Create product line summary row\n    const avgEfficiency = Math.round(totalEfficiency / children.length);\n    const avgDefectRate = ((totalDefects / totalOutput) * 100).toFixed(2);\n\n    rows.push({\n      rowMeta: { rowId: rowId++, isExpanded: true, children },\n      rowData: {\n        id: `${productLine.charAt(0)}${lineIndex + 1}`,\n        productLine,\n        station: `${productLine} Summary`,\n        machineType: \"—\",\n        operator: \"—\",\n        productType: \"—\",\n        outputRate: totalOutput,\n        cycletime: \"—\",\n        efficiency: avgEfficiency,\n        defectRate: avgDefectRate,\n        defectCount: totalDefects,\n        downtime: totalDowntime.toFixed(2),\n        utilization: \"—\",\n        energy: children.reduce((sum, child) => sum + (child.rowData.energy as number), 0),\n        status: \"—\",\n        maintenanceDate: \"—\",\n        cycleTimeData: \"—\",\n      },\n    });\n  });\n\n  return rows;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///Users/peter/Documents/dev_projects/simple-table-marketing/src/components/examples/manufacturing/manufacturing-headers.tsx"],"sourcesContent":["import { HeaderObject } from \"simple-table-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCheckCircle,\n  faCog,\n  faExclamationTriangle,\n  faClock,\n  faTools,\n  faInfoCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Tag, Progress } from \"antd\";\n\nexport const HEADERS: HeaderObject[] = [\n  {\n    accessor: \"productLine\",\n    label: \"Production Line\",\n    width: 180,\n    expandable: true,\n    isSortable: true,\n    isEditable: false,\n    align: \"left\",\n    type: \"string\",\n    cellRenderer: ({ row }) => {\n      const isLineRow = row.rowData.station?.toString().includes(\"Summary\") || false;\n      return isLineRow ? <span className=\"font-bold\">{row.rowData.productLine}</span> : row.rowData.productLine;\n    },\n  },\n  {\n    accessor: \"station\",\n    label: \"Workstation\",\n    width: 150,\n    isSortable: true,\n    isEditable: false,\n    align: \"left\",\n    type: \"string\",\n    cellRenderer: ({ row }) => {\n      const isLineRow = row.rowData.station?.toString().includes(\"Summary\") || false;\n      if (isLineRow) {\n        return <span className=\"text-gray-500\">{row.rowData.id}</span>;\n      }\n      return (\n        <div className=\"flex items-center gap-1\">\n          <span className=\"bg-blue-100 text-blue-700 text-xs font-medium px-1.5 py-0.5 rounded\">{row.rowData.id}</span>\n          <span>{row.rowData.station}</span>\n        </div>\n      );\n    },\n  },\n  {\n    accessor: \"machineType\",\n    label: \"Machine Type\",\n    width: 150,\n    isSortable: true,\n    isEditable: false,\n    align: \"left\",\n    type: \"string\",\n  },\n  {\n    accessor: \"status\",\n    label: \"Status\",\n    width: 180,\n    isSortable: true,\n    isEditable: false,\n    align: \"center\",\n    type: \"string\",\n    cellRenderer: ({ row }) => {\n      if (row.rowData.status === \"—\") return \"—\";\n\n      const status = row.rowData.status as string;\n      const colorMap = {\n        Running: { color: \"green\", icon: faCheckCircle },\n        \"Scheduled Maintenance\": { color: \"blue\", icon: faCog },\n        \"Unplanned Downtime\": { color: \"red\", icon: faExclamationTriangle },\n        Idle: { color: \"orange\", icon: faClock },\n        Setup: { color: \"purple\", icon: faTools },\n      };\n\n      const statusInfo = colorMap[status as keyof typeof colorMap] || { color: \"default\", icon: faInfoCircle };\n\n      return (\n        <Tag color={statusInfo.color} className=\"px-2 py-1\">\n          <FontAwesomeIcon icon={statusInfo.icon} className=\"mr-1\" />\n          {status}\n        </Tag>\n      );\n    },\n  },\n  {\n    accessor: \"outputRate\",\n    label: \"Output (units/shift)\",\n    width: 160,\n    isSortable: true,\n    isEditable: false,\n    align: \"right\",\n    type: \"number\",\n    cellRenderer: ({ row }) => {\n      const isLineRow = row.rowData.station?.toString().includes(\"Summary\") || false;\n      return <div className={isLineRow ? \"font-bold\" : \"\"}>{(row.rowData.outputRate as number).toLocaleString()}</div>;\n    },\n  },\n  {\n    accessor: \"cycletime\",\n    label: \"Cycle Time (s)\",\n    width: 140,\n    isSortable: true,\n    isEditable: false,\n    align: \"right\",\n    type: \"number\",\n  },\n  {\n    accessor: \"efficiency\",\n    label: \"Efficiency\",\n    width: 150,\n    isSortable: true,\n    isEditable: false,\n    align: \"center\",\n    type: \"number\",\n    cellRenderer: ({ row }) => {\n      if (row.rowData.efficiency === \"—\") return \"—\";\n\n      const efficiency = row.rowData.efficiency as number;\n      const getColorByEfficiency = (value: number): \"success\" | \"normal\" | \"exception\" => {\n        if (value >= 90) return \"success\";\n        if (value >= 75) return \"normal\";\n        return \"exception\";\n      };\n\n      return (\n        <div className=\"w-full flex flex-col\">\n          <Progress percent={efficiency} size=\"small\" showInfo={false} status={getColorByEfficiency(efficiency)} />\n          <div className=\"text-xs text-center mt-1\">{efficiency}%</div>\n        </div>\n      );\n    },\n  },\n  {\n    accessor: \"defectRate\",\n    label: \"Defect Rate\",\n    width: 120,\n    isSortable: true,\n    isEditable: false,\n    align: \"right\",\n    type: \"number\",\n    cellRenderer: ({ row }) => {\n      if (row.rowData.defectRate === \"—\") return \"—\";\n      const rate = parseFloat(row.rowData.defectRate as string);\n      const color = rate < 1 ? \"text-green-600\" : rate < 3 ? \"text-orange-500\" : \"text-red-600\";\n\n      return <span className={color}>{rate}%</span>;\n    },\n  },\n  {\n    accessor: \"defectCount\",\n    label: \"Defects\",\n    width: 120,\n    isSortable: true,\n    isEditable: false,\n    align: \"right\",\n    type: \"number\",\n  },\n  {\n    accessor: \"downtime\",\n    label: \"Downtime (h)\",\n    width: 130,\n    isSortable: true,\n    isEditable: false,\n    align: \"right\",\n    type: \"number\",\n    cellRenderer: ({ row }) => {\n      if (row.rowData.downtime === \"—\") return \"—\";\n\n      const hours = parseFloat(row.rowData.downtime as string);\n      const color = hours < 1 ? \"text-green-600\" : hours < 2 ? \"text-orange-500\" : \"text-red-600\";\n\n      return <span className={color}>{hours}</span>;\n    },\n  },\n  {\n    accessor: \"utilization\",\n    label: \"Utilization\",\n    width: 130,\n    isSortable: true,\n    isEditable: false,\n    align: \"right\",\n    type: \"number\",\n    cellRenderer: ({ row }) => {\n      if (row.rowData.utilization === \"—\") return \"—\";\n      return `${row.rowData.utilization}%`;\n    },\n  },\n  {\n    accessor: \"energy\",\n    label: \"Energy (kWh)\",\n    width: 130,\n    isSortable: true,\n    isEditable: false,\n    align: \"right\",\n    type: \"number\",\n    cellRenderer: ({ row }) => {\n      return (row.rowData.energy as number).toLocaleString();\n    },\n  },\n  {\n    accessor: \"maintenanceDate\",\n    label: \"Next Maintenance\",\n    width: 150,\n    isSortable: true,\n    isEditable: false,\n    align: \"center\",\n    type: \"date\",\n    cellRenderer: ({ row }) => {\n      if (row.rowData.maintenanceDate === \"—\") return \"—\";\n\n      const date = new Date(row.rowData.maintenanceDate as string);\n      const today = new Date();\n      const diffDays = Math.ceil((date.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n\n      let color = \"blue\";\n      if (diffDays <= 3) color = \"red\";\n      else if (diffDays <= 7) color = \"orange\";\n\n      return (\n        <Tag color={color}>\n          {date.toLocaleDateString()} ({diffDays} days)\n        </Tag>\n      );\n    },\n  },\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":["file:///Users/peter/Documents/dev_projects/simple-table-marketing/src/app/examples/manufacturing/page.tsx"],"sourcesContent":["import { SimpleTable } from \"simple-table-core\";\nimport { generateManufacturingData } from \"@/components/examples/manufacturing/manufacturing-rows\";\nimport { HEADERS } from \"@/components/examples/manufacturing/manufacturing-headers\";\nimport \"simple-table-core/styles.css\";\n\nconst data = generateManufacturingData();\n\nexport default function ManufacturingExample() {\n  return (\n    <SimpleTable\n      columnResizing\n      columnReordering\n      defaultHeaders={HEADERS}\n      rows={data}\n      height=\"60dvh\"\n      theme=\"light\"\n      selectableCells\n    />\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;AAGA,MAAM,OAAO,CAAA,GAAA,uKAAA,CAAA,4BAAyB,AAAD;AAEtB,SAAS;IACtB,qBACE,8OAAC,8JAAA,CAAA,cAAW;QACV,cAAc;QACd,gBAAgB;QAChB,gBAAgB,2KAAA,CAAA,UAAO;QACvB,MAAM;QACN,QAAO;QACP,OAAM;QACN,eAAe;;;;;;AAGrB","debugId":null}}]
}